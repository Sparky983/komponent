// Generated by me/sparky983/komponent/generate.kt

@file:Suppress("PackageDirectoryMismatch")

package me.sparky983.komponent

import kotlinx.browser.document
import org.w3c.dom.events.*
import org.w3c.dom.*

private typealias EventHandler<E> = (E) -> Unit

@PublishedApi
internal fun Html.tag(
    name: String,
    attributes: Map<String, Signal<String?>>,
    events: Map<String, EventHandler<*>?>,
    children: Children
): Node {
    val domNode = document.createElement(name)
    val tag = Tag(domNode, contexts)
    for ((attribute, signal) in attributes) {
        signal.subscribe {
            if (it == null) {
                domNode.removeAttribute(attribute)
            } else {
                domNode.setAttribute(attribute, it)
            }
        }
    }
    for ((event, handler) in events) {
        if (handler != null) {
            domNode.addEventListener(
                event,
                handler.unsafeCast<(Event) -> Unit>()
            )
        }
    }
    tag.children()
    emit(tag)
    return domNode
}

@Suppress("unused")
public fun Html.a(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    href: Signal<String>,
    download: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLAnchorElement {
    return tag(
        "a",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            put("href", href)
            download?.let { put("download", download) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLAnchorElement
}

@Suppress("unused")
public fun Html.abbr(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "abbr",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.address(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "address",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.article(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "article",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.b(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "b",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.blockquote(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    cite: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLQuoteElement {
    return tag(
        "blockquote",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            cite?.let { put("cite", cite) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLQuoteElement
}

@Suppress("unused")
public fun Html.br(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
): HTMLBRElement {
    return tag(
        "br",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        )    ) {} as HTMLBRElement
}

@Suppress("unused")
public fun Html.button(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    disabled: Signal<Boolean>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLButtonElement {
    return tag(
        "button",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            disabled?.let { put("disabled", disabled { if (it) "" else null }) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLButtonElement
}

@Suppress("unused")
public fun Html.caption(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLTableCaptionElement {
    return tag(
        "caption",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLTableCaptionElement
}

@Suppress("unused")
public fun Html.cite(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "cite",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.code(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "code",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.col(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    span: Signal<Int>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLTableColElement {
    return tag(
        "col",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            span?.let { put("span", span(Any::toString)) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLTableColElement
}

@Suppress("unused")
public fun Html.colgroup(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    span: Signal<Int>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLTableColElement {
    return tag(
        "colgroup",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            span?.let { put("span", span(Any::toString)) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLTableColElement
}

@Suppress("unused")
public fun Html.data(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    value: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLDataElement {
    return tag(
        "data",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            value?.let { put("value", value) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLDataElement
}

@Suppress("unused")
public fun Html.datalist(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLDataListElement {
    return tag(
        "datalist",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLDataListElement
}

@Suppress("unused")
public fun Html.dd(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "dd",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.del(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    cite: Signal<String>? = null,
    dateTime: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLModElement {
    return tag(
        "del",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            cite?.let { put("cite", cite) }
            dateTime?.let { put("datetime", dateTime) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLModElement
}

@Suppress("unused")
public fun Html.details(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    open: Signal<Boolean>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLDetailsElement {
    return tag(
        "details",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            open?.let { put("open", open { if (it) "" else null }) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLDetailsElement
}

@Suppress("unused")
public fun Html.dfn(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "dfn",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.dialog(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    open: Signal<Boolean>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLDialogElement {
    return tag(
        "dialog",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            open?.let { put("open", open { if (it) "" else null }) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLDialogElement
}

@Suppress("unused")
public fun Html.div(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLDivElement {
    return tag(
        "div",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLDivElement
}

@Suppress("unused")
public fun Html.form(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    accept: Signal<String>? = null,
    acceptCharset: Signal<String>? = null,
    autoComplete: Signal<String>? = null,
    name: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    onSubmit: EventHandler<Event>? = null,
    onInvalid: EventHandler<Event>? = null,
    children: Children
): HTMLFormElement {
    return tag(
        "form",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            accept?.let { put("accept", accept) }
            acceptCharset?.let { put("accept-charset", acceptCharset) }
            autoComplete?.let { put("autocomplete", autoComplete) }
            name?.let { put("name", name) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
            "submit" to onSubmit, 
            "invalid" to onInvalid, 
        ),
        children = children
    ) as HTMLFormElement
}

@Suppress("unused")
public fun Html.h1(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLHeadingElement {
    return tag(
        "h1",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLHeadingElement
}

@Suppress("unused")
public fun Html.h2(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLHeadingElement {
    return tag(
        "h2",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLHeadingElement
}

@Suppress("unused")
public fun Html.h3(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLHeadingElement {
    return tag(
        "h3",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLHeadingElement
}

@Suppress("unused")
public fun Html.h4(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLHeadingElement {
    return tag(
        "h4",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLHeadingElement
}

@Suppress("unused")
public fun Html.h5(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLHeadingElement {
    return tag(
        "h5",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLHeadingElement
}

@Suppress("unused")
public fun Html.h6(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLHeadingElement {
    return tag(
        "h6",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLHeadingElement
}

@Suppress("unused")
public fun Html.hr(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
): HTMLHRElement {
    return tag(
        "hr",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        )    ) {} as HTMLHRElement
}

@Suppress("unused")
public fun Html.i(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "i",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.img(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    src: Signal<String>,
    alt: Signal<String>? = null,
    loading: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
): HTMLImageElement {
    return tag(
        "img",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            put("src", src)
            alt?.let { put("alt", alt) }
            loading?.let { put("loading", loading) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        )    ) {} as HTMLImageElement
}

@Suppress("unused")
public fun Html.input(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    accept: Signal<String>? = null,
    alt: Signal<String>? = null,
    autoCapitalize: Signal<String>? = null,
    checked: Signal<Boolean>? = null,
    dirName: Signal<String>? = null,
    disabled: Signal<Boolean>? = null,
    form: Signal<String>? = null,
    inputMode: Signal<String>? = null,
    list: Signal<String>? = null,
    max: Signal<String>? = null,
    maxLength: Signal<Int>? = null,
    min: Signal<String>? = null,
    minLength: Signal<Int>? = null,
    multiple: Signal<Boolean>? = null,
    name: Signal<String>? = null,
    pattern: Signal<String>? = null,
    placeholder: Signal<String>? = null,
    readOnly: Signal<Boolean>? = null,
    required: Signal<Boolean>? = null,
    src: Signal<String>? = null,
    step: Signal<String>? = null,
    type: Signal<String>? = null,
    value: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    onInput: EventHandler<InputEvent>? = null,
    onInvalid: EventHandler<Event>? = null,
): HTMLInputElement {
    return tag(
        "input",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            accept?.let { put("accept", accept) }
            alt?.let { put("alt", alt) }
            autoCapitalize?.let { put("autocapitalize", autoCapitalize) }
            checked?.let { put("checked", checked { if (it) "" else null }) }
            dirName?.let { put("dirname", dirName) }
            disabled?.let { put("disabled", disabled { if (it) "" else null }) }
            form?.let { put("form", form) }
            inputMode?.let { put("inputmode", inputMode) }
            list?.let { put("list", list) }
            max?.let { put("max", max) }
            maxLength?.let { put("maxlength", maxLength(Any::toString)) }
            min?.let { put("min", min) }
            minLength?.let { put("minlength", minLength(Any::toString)) }
            multiple?.let { put("multiple", multiple { if (it) "" else null }) }
            name?.let { put("name", name) }
            pattern?.let { put("pattern", pattern) }
            placeholder?.let { put("placeholder", placeholder) }
            readOnly?.let { put("readonly", readOnly { if (it) "" else null }) }
            required?.let { put("required", required { if (it) "" else null }) }
            src?.let { put("src", src) }
            step?.let { put("step", step) }
            type?.let { put("type", type) }
            value?.let { put("value", value) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
            "input" to onInput, 
            "invalid" to onInvalid, 
        )    ) {} as HTMLInputElement
}

@Suppress("unused")
public fun Html.ins(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    cite: Signal<String>? = null,
    dateTime: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLModElement {
    return tag(
        "ins",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            cite?.let { put("cite", cite) }
            dateTime?.let { put("datetime", dateTime) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLModElement
}

@Suppress("unused")
public fun Html.kbd(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "kbd",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.label(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    htmlFor: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLLabelElement {
    return tag(
        "label",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            htmlFor?.let { put("for", htmlFor) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLLabelElement
}

@Suppress("unused")
public fun Html.legend(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLLegendElement {
    return tag(
        "legend",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLLegendElement
}

@Suppress("unused")
public fun Html.li(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    value: Signal<Int>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLLIElement {
    return tag(
        "li",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            value?.let { put("value", value(Any::toString)) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLLIElement
}

@Suppress("unused")
public fun Html.main(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "main",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.ol(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    reversed: Signal<Boolean>? = null,
    start: Signal<Int>? = null,
    type: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLOListElement {
    return tag(
        "ol",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            reversed?.let { put("reversed", reversed { if (it) "" else null }) }
            start?.let { put("start", start(Any::toString)) }
            type?.let { put("type", type) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLOListElement
}

@Suppress("unused")
public fun Html.optgroup(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    disabled: Signal<Boolean>? = null,
    label: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLOptGroupElement {
    return tag(
        "optgroup",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            disabled?.let { put("disabled", disabled { if (it) "" else null }) }
            label?.let { put("label", label) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLOptGroupElement
}

@Suppress("unused")
public fun Html.option(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    disabled: Signal<Boolean>? = null,
    label: Signal<String>? = null,
    selected: Signal<Boolean>? = null,
    value: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLOptionElement {
    return tag(
        "option",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            disabled?.let { put("disabled", disabled { if (it) "" else null }) }
            label?.let { put("label", label) }
            selected?.let { put("selected", selected { if (it) "" else null }) }
            value?.let { put("value", value) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLOptionElement
}

@Suppress("unused")
public fun Html.p(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLParagraphElement {
    return tag(
        "p",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLParagraphElement
}

@Suppress("unused")
public fun Html.progress(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    max: Signal<Int>? = null,
    value: Signal<Int>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLProgressElement {
    return tag(
        "progress",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            max?.let { put("max", max(Any::toString)) }
            value?.let { put("value", value(Any::toString)) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLProgressElement
}

@Suppress("unused")
public fun Html.span(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLSpanElement {
    return tag(
        "span",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLSpanElement
}

@Suppress("unused")
public fun Html.select(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    autoComplete: Signal<String>? = null,
     autoFocus: Signal<Boolean>? = null,
    disabled: Signal<Boolean>? = null,
    form: Signal<String>? = null,
    multiple: Signal<Boolean>? = null,
    required: Signal<Boolean>? = null,
    size: Signal<Int>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    onInput: EventHandler<InputEvent>? = null,
    onChange: EventHandler<Event>? = null,
    children: Children
): HTMLSelectElement {
    return tag(
        "select",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            autoComplete?.let { put("autocomplete", autoComplete) }
             autoFocus?.let { put("autofocus",  autoFocus { if (it) "" else null }) }
            disabled?.let { put("disabled", disabled { if (it) "" else null }) }
            form?.let { put("form", form) }
            multiple?.let { put("multiple", multiple { if (it) "" else null }) }
            required?.let { put("required", required { if (it) "" else null }) }
            size?.let { put("size", size(Any::toString)) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
            "input" to onInput, 
            "change" to onChange, 
        ),
        children = children
    ) as HTMLSelectElement
}

@Suppress("unused")
public fun Html.selectedcontent(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    children: Children
): HTMLElement {
    return tag(
        "selectedcontent",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
        ),
        children = children
    ) as HTMLElement
}

@Suppress("unused")
public fun Html.textarea(
    className: Signal<String>? = null,
    draggable: Signal<String>? = null,
    id: Signal<String>? = null,
    style: Signal<String>? = null,
    tabIndex: Signal<Int>? = null,
    title: Signal<String>? = null,
    autoCapitalize: Signal<String>? = null,
    autoCorrect: Signal<String>? = null,
    autoFocus: Signal<Boolean>? = null,
    cols: Signal<Int>? = null,
    dirName: Signal<String>? = null,
    disabled: Signal<Boolean>? = null,
    form: Signal<String>? = null,
    maxLength: Signal<Int>? = null,
    minLength: Signal<Int>? = null,
    multiple: Signal<Boolean>? = null,
    name: Signal<String>? = null,
    placeholder: Signal<String>? = null,
    readOnly: Signal<Boolean>? = null,
    required: Signal<Boolean>? = null,
    rows: Signal<Int>? = null,
    spellCheck: Signal<String>? = null,
    wrap: Signal<String>? = null,
    onBlur: EventHandler<FocusEvent>? = null,
    onClick: EventHandler<org.w3c.dom.pointerevents.PointerEvent>? = null,
    onFocus: EventHandler<FocusEvent>? = null,
    onFocusIn: EventHandler<FocusEvent>? = null,
    onFocusOut: EventHandler<FocusEvent>? = null,
    onKeyDown: EventHandler<KeyboardEvent>? = null,
    onKeyUp: EventHandler<KeyboardEvent>? = null,
    onLoad: EventHandler<Event>? = null,
    onMouseDown: EventHandler<MouseEvent>? = null,
    onMouseEnter: EventHandler<MouseEvent>? = null,
    onMouseLeave: EventHandler<MouseEvent>? = null,
    onMouseMove: EventHandler<MouseEvent>? = null,
    onMouseOut: EventHandler<MouseEvent>? = null,
    onMouseover: EventHandler<MouseEvent>? = null,
    onMouseUp: EventHandler<MouseEvent>? = null,
    onUnload: EventHandler<Event>? = null,
    onWheel: EventHandler<WheelEvent>? = null,
    onInput: EventHandler<InputEvent>? = null,
    onInvalid: EventHandler<Event>? = null,
    children: Children
): HTMLTextAreaElement {
    return tag(
        "textarea",
        buildMap {
            className?.let { put("class", className) }
            draggable?.let { put("draggable", draggable) }
            id?.let { put("id", id) }
            style?.let { put("style", style) }
            tabIndex?.let { put("tabindex", tabIndex(Any::toString)) }
            title?.let { put("title", title) }
            autoCapitalize?.let { put("autocapitalize", autoCapitalize) }
            autoCorrect?.let { put("autocorrect", autoCorrect) }
            autoFocus?.let { put("autofocus", autoFocus { if (it) "" else null }) }
            cols?.let { put("cols", cols(Any::toString)) }
            dirName?.let { put("dirname", dirName) }
            disabled?.let { put("disabled", disabled { if (it) "" else null }) }
            form?.let { put("form", form) }
            maxLength?.let { put("maxlength", maxLength(Any::toString)) }
            minLength?.let { put("minlength", minLength(Any::toString)) }
            multiple?.let { put("multiple", multiple { if (it) "" else null }) }
            name?.let { put("name", name) }
            placeholder?.let { put("placeholder", placeholder) }
            readOnly?.let { put("readonly", readOnly { if (it) "" else null }) }
            required?.let { put("required", required { if (it) "" else null }) }
            rows?.let { put("rows", rows(Any::toString)) }
            spellCheck?.let { put("spellcheck", spellCheck) }
            wrap?.let { put("wrap", wrap) }
        },
        mapOf(
            "blur" to onBlur, 
            "click" to onClick, 
            "focus" to onFocus, 
            "focusin" to onFocusIn, 
            "focusout" to onFocusOut, 
            "keydown" to onKeyDown, 
            "keyup" to onKeyUp, 
            "load" to onLoad, 
            "mousedown" to onMouseDown, 
            "mouseEnter" to onMouseEnter, 
            "mouseleave" to onMouseLeave, 
            "mousemove" to onMouseMove, 
            "mouseout" to onMouseOut, 
            "mouseover" to onMouseover, 
            "mouseup" to onMouseUp, 
            "unload" to onUnload, 
            "wheel" to onWheel, 
            "input" to onInput, 
            "invalid" to onInvalid, 
        ),
        children = children
    ) as HTMLTextAreaElement
}